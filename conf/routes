# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# An example controller showing a sample home page
GET     /                                                                      controllers.HomeController.index()

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file                                                          controllers.Assets.versioned(path="/public", file: Asset)

###
#       tags:
#           - Movies
#       summary: Adds a show time to an existing movie
#       description: Returns the id of the new show time
#       produces:
#           - application/json
#       schemes:
#           - https
#       parameters:
#           - name: movieId
#             in: path
#             description: Id of the movie with the new show time
#             required: true
#             type: int
#           - name: showTime
#             in: body
#             description: Show time of the movie
#             required: true
#             type: LocalTime
#           - name: price
#             in: body
#             description: Price of the movie show time
#             required: true
#             type: BigDecimal
#       responses:
#           '200':
#               description: Id of the created movie show detail
#               schema:
#                   type: Int
#           '400':
#               description: Body does not have the correct format or movie show time already exists
#               schema:
#                   $ref: '#/definitions/models.ExceptionDTO'
#           '404':
#               description: Movie ID not found
#               schema:
#                   $ref: '#/definitions/models.ExceptionDTO'
###
POST    /:movieId/movie-show-details                                           controllers.MoviesController.addMovieShowTime(movieId: Int)

###
#       tags:
#           - Movies
#       summary: Retrieves all the show times for an existing movie
#       description: Returns a MovieShowDetailsDTO that contains the name and show times of the movie
#       produces:
#           - application/json
#       schemes:
#           - https
#       parameters:
#           - name: movieId
#             in: path
#             description: Id of the movie whose show times will be retrieved
#             required: true
#             type: int
#       responses:
#           '200':
#               description: Show details of the selected movie
#               schema:
#                   type: MovieShowDetailsDTO
#           '404':
#               description: Movie ID not found
#               schema:
#                   $ref: '#/definitions/models.ExceptionDTO'
###
GET    /:movieId/movie-show-details                                            controllers.MoviesController.getMovieShowTimes(movieId: Int)

###
#       tags:
#           - Movies
#       summary: Edits an existing show time of a movie
#       description: Returns the edited show time
#       produces:
#           - application/json
#       schemes:
#           - https
#       parameters:
#           - name: movieId
#             in: path
#             description: Id of the movie whose show time will be edited
#             required: true
#             type: int
#           - name: movieShowDetailId
#             in: path
#             description: Id of the movie show time that will be edited
#             required: true
#             type: int
#           - name: showTime
#             in: body
#             description: New show time of the movie
#             required: false
#             type: LocalTime
#           - name: price
#             in: body
#             description: New price of the movie show time
#             required: false
#             type: BigDecimal
#       responses:
#           '200':
#               description: Movie show time edited
#               schema:
#                   type: MovieShowTimeRetrievedDTO
#           '400':
#               description: The show time detail selected is not from the movie selected or invalid body is received
#               schema:
#                   $ref: '#/definitions/models.ExceptionDTO'
#           '404':
#               description: Movie ID or movie show time detail ID not found
#               schema:
#                   $ref: '#/definitions/models.ExceptionDTO'
###
PUT    /:movieId/movie-show-details/:movieShowTimeId                           controllers.MoviesController.editMovieShowTime(movieId: Int, movieShowTimeId: Int)

###
#       tags:
#           - Movies
#       summary: Soft delete an existing show time
#       description: Returns "ok" if the show time was deleted successfully
#       produces:
#           - application/json
#       schemes:
#           - https
#       parameters:
#           - name: movieId
#             in: path
#             description: Id of the movie whose show time will be edited
#             required: true
#             type: int
#           - name: movieShowDetailId
#             in: path
#             description: Id of the movie show time that will be edited
#             required: true
#             type: int
#       responses:
#           '200':
#               description: Movie show time deleted successfully
#               schema:
#                   type: MovieShowTimeRetrievedDTO
#           '400':
#               description: The show time detail selected is not from the movie selected
#               schema:
#                   $ref: '#/definitions/models.ExceptionDTO'
#           '404':
#               description: Movie ID or movie show time detail ID not found
#               schema:
#                   $ref: '#/definitions/models.ExceptionDTO'
###
DELETE    /:movieId/movie-show-details/:movieShowTimeId                        controllers.MoviesController.deleteMovieShowTime(movieId: Int, movieShowTimeId: Int)

###
#       tags:
#           - Movies
#       summary: Get details about a specified movie ID
#       description: Returns a MovieDetailsDTO with the details of the movie
#       produces:
#           - application/json
#       schemes:
#           - https
#       parameters:
#           - name: movieId
#             in: path
#             description: Id of the movie whose details will be fetched
#             required: true
#             type: int
#       responses:
#           '200':
#               description: Movie details fetched successfully
#               schema:
#                   type: MovieDetailsDTO
#           '404':
#               description: Movie ID  not found
#               schema:
#                   $ref: '#/definitions/models.ExceptionDTO'
###
GET    /:movieId/movie-details                                                 controllers.MoviesController.checkMovieDetails(movieId: Int)
